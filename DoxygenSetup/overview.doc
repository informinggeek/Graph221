//******************************************************************************
// This section is the main page of the HTML and the first chapter in LaTeX.
//******************************************************************************

/**
 * \mainpage Overview
 *
 * \section overview Overview
 *
 * In this assignment, you are tasked with implementing the graph ADT using an
 * adjacency list implementation. As usual, there will be a code portion and a
 * report portion to this assignment.
 *
 * \section Requirements
 *
 * At a minimum, you must implement the following for your graph:
 *
 * <ol>
 * <li>Core ADT as found in the book. You must use the
 *    <a href="../../graph.h">provided interface</a>, but the design of the
 *    functions and internal state is up to you. Basic requirements include:
 *    <ol>
 *    <li>The graph takes two template parameters for vertex object and edge
 *        object types and should contain internal classes for vertex and
 *        edge.</li>
 *    <li>Vertices are referred to by a global vertex descriptor (size_t). Edges
 *        are referred to by edge descriptors (pair&lt;size_t, size_t&gt;).</li>
 *    <li>Typedefs should define descriptors, storage, and iterators for vertices,
 *        edges, and adjacency lists.</li>
 *    <li>Accessors must be provided for properties, descriptors, begin/end
 *        iterators, and finding vertices/edges based on descriptors.</li>
 *    <li>Basic modifiers should be provided for inserting and removing vertices
 *        and edges.</li>
 *    </ol>
 * </li>
 *
 * <li>Input/Output operators for your graph class using the following file
 *    specification:
 *    <h4>Example file:</h4>
 *    <p>
 *    <code>
 *    5 4<br>
 *    D<br>
 *    E<br>
 *    N<br>
 *    N<br>
 *    Y<br>
 *    0 1 40<br>
 *    3 4 23<br>
 *    1 0 40<br>
 *    4 3 23<br>
 *    </code>
 *    </p>
 *    <h4>Corresponding Specification:</h4>
 *    <p>
 *    <code>
 *    num_vertices num_edges<br>
 *    vertex_0<br>
 *    vertex_1<br>
 *    ...<br>
 *    vertex_n<br>
 *    edge_0<br>
 *    edge_1<br>
 *    ...<br>
 *    edge_m<br>
 *    </code>
 *    </p>
 *
 *    Note edges are formed as <code>v_i v_j weight</code>.
 *    <a href="../../football.g">Here is a larger example file</a> for a
 *    <code>graph<int, int></code>.</li>
 *
 * <li>A breadth-first search algorithm, which labels the vertices and edges as
 *    discussed in class and stores extra pointer information for the BFS tree.
 *    The interface for the BFS function can be found in the
 *    <a href="../../graph_algorithms.h">algorithms</a> file.</li>
 *
 * <li>You must also implement one of the MST or SSSP algorithms for your graph.
 *    Interfaces for these functions are also in the
 *    <a href="../../graph_algorithms.h">algorithms</a> file.</li>
 * </ol>
 *
 * \section Report
 *
 * For each algorithm you implement, test performance of your graph on:
 *
 * <ol>
 * <li>A planar mesh (a 2d grid of nodes where each interior vertex has degree
 *   4).</li>
 *
 * <li>A complete graph (all nodes are mutually connected).</li>
 *
 * <li>A randomly connected graph (start with a connected line of vertices, then
 *   add random edges).</li>
 * </ol>
 *
 * After doing base performance measurements, you also need to determine the
 * big-oh constants for the algorithm on a planar mesh input. The report should
 * include the following sections:
 *
 * <ol>
 * <li><b>Introduction</b>: describe the problem and objectives.</li>
 * <li><b>Implementation details</b>: discuss design decisions of the
 *   graph.</li>
 * <li><b>Theoretical Analysis</b>: discuss complexity of graph operations and
 *   algorithms.</li>
 * <li><b>Experimental Analysis</b>: discuss setup, results, and big-oh
 *   constants. Attempt to explain any anomolous observations.</li>
 * <li><b>Team Contributions</b>: detail the individual contributions of each
 *   team member.</li>
 * <li><b>Conclusion</b>: extract the most important analyses from your
 *   experiments and provide an executive summary. State what you learned
 *   through the project and how/why you might do things differently if you were
 *   going to do it again.</li>
 * </ol>
 *
 **/
